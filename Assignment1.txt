/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */



/*
1. Find out if a Tree is Balanced. ( Tree is balanced if for every node difference between height of left and right is <=1) https://leetcode.com/problems/balanced-binary-tree/
*/

class Solution {
    public boolean isBalanced(TreeNode root) {
        if (root == null) {
            return true;
        }
        int heightLeft = height(root.left);
        int heightRight = height(root.right);
        
        return (Math.abs(heightLeft - heightRight) < 2) &&
            isBalanced(root.left) &&
            isBalanced(root.right);  
    }
    
    int height(TreeNode node) {
        if (node == null) {
            return 0;
        }
        
        int hLeft = height(node.left);
        int hRight = height(node.right);
        
        int max = Math.max(hLeft, hRight);
        return max+1;    
    }
}




/*
2. Find Minimum depth of all the leaves in a tree. https://leetcode.com/problems/minimum-depth-of-binary-tree/
*/

class Solution {
    public int minDepth(TreeNode root) {
        if (root == null){
         return 0;   
        }
        int dLeft = minDepth(root.left);
        int dRight = minDepth(root.right);
        
        int childMinDepth;
        if (dLeft == 0 || dRight == 0) {
            childMinDepth = Math.max(dLeft, dRight);
        } else {
            childMinDepth = Math.min(dLeft, dRight);   
        }
        return childMinDepth+1;  
        
    }
}




/*
3. Print all the leaves of a tree.  https://leetcode.com/problems/find-leaves-of-binary-tree/
*/

class Solution {
    void printLeaveNode(TreeNode root) {
        if ( root == null ) {
            return;
        }
        if ( root.left == null && root.right == null ) {
            System.out.println(root.val);
        } else if ( root.left != null || root.right != null) {
            printLeaveNode(root.left);
            printLeaveNode(root.right);
        }
    }




/*
4. Print sum of all the left leaves. https://leetcode.com/problems/sum-of-left-leaves/
*/

class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null) {
            return 0;
        }
        
        int left = sumOfLeftLeaves(root.left);
        int right = sumOfLeftLeaves(root.right);
        
        if (root.left!=null && root.left.left == null && root.left.right == null) {
            return left + right + root.left.val;
        }
        return  left + right;
    }
}